// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForBatchPublish implements pgx.CopyFromSource.
type iteratorForBatchPublish struct {
	rows                 []BatchPublishParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchPublish) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchPublish) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Subject,
		r.rows[0].Body,
		r.rows[0].Expiration,
	}, nil
}

func (r iteratorForBatchPublish) Err() error {
	return nil
}

func (q *Queries) BatchPublish(ctx context.Context, db DBTX, arg []BatchPublishParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"messages"}, []string{"id", "subject", "body", "expiration"}, &iteratorForBatchPublish{rows: arg})
}
